# -*- coding: utf-8 -*-
"""time series forecasting

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zpml-wsMIlyqmPLBJo43uQqkQ30y6AyT
"""

import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Load historical data into a pandas DataFrame
data = pd.read_csv('/content/sales_data_sample.csv', encoding="ISO-8859-1")

# Split the data into train and test sets
train_size = int(len(data) * 0.8)
train_data = data[:train_size]
test_data = data[train_size:]

# ARIMA model
arima_model = ARIMA(train_data['SALES'], order=(1, 1, 1))
arima_model_fit = arima_model.fit()

# Make forecasts using ARIMA model
arima_forecast = arima_model_fit.forecast(steps=len(test_data))

# Evaluate the models using RMSE and MAE
arima_rmse = mean_squared_error(test_data['SALES'], arima_forecast, squared=False)
arima_mae = mean_absolute_error(test_data['SALES'], arima_forecast)

print("ARIMA RMSE:", arima_rmse)
print("ARIMA MAE:", arima_mae)

prophet_model = Prophet()
prophet_model.fit(train_data.rename(columns={'ORDERDATE': 'ds', 'SALES': 'y'}))

# Make forecasts using Prophet model
future_dates = prophet_model.make_future_dataframe(periods=len(test_data))
prophet_forecast = prophet_model.predict(future_dates)

# Extract the forecasted values from the Prophet forecast
prophet_forecast = prophet_forecast.tail(len(test_data))['yhat'].values

# Evaluate the models using RMSE and MAE
prophet_rmse = mean_squared_error(test_data['SALES'], prophet_forecast, squared=False)
prophet_mae = mean_absolute_error(test_data['SALES'], prophet_forecast)

print("Prophet RMSE:", prophet_rmse)
print("Prophet MAE:", prophet_mae)